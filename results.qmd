# Results

```{r setup, include=FALSE} 
knitr::opts_chunk$set(warning = FALSE, message = FALSE) 
```

```{r,echo=FALSE}
library(dplyr)
library(tibble)
library(tidyr)
library(ggplot2)
library(forcats)
library(tidyverse)
library(redav)
```

```{r,echo=FALSE}
df <- read.csv('data.csv')

df <- df %>%
  mutate_if(is.character, na_if, "")

df <- subset(df, select = -c(YearEnd, Datasource,LocationAbbr, Topic,Data_Value_Unit,Data_Value_Type,Data_Value_Alt,Data_Value_Footnote_Symbol,Data_Value_Footnote,Low_Confidence_Limit,High_Confidence_Limit,Total,Age.years.,Education,Gender,Income,Race.Ethnicity,ClassID,TopicID,QuestionID,DataValueTypeID,LocationID ,StratificationCategoryId1,StratificationID1))

df <- df %>%
  mutate_if(is.character, na_if, "")

colnames(df)[2] <-  "Location"
colnames(df)[5] <-  "Value"
colnames(df)[6] <-  "SampleSize"
colnames(df)[8] <-  "Category"
colnames(df)[9] <-  "CategoryVal"



```

```{r}
df$Location <- tolower(df$Location)
```


```{r}
library(dplyr)
library(tidyr)
library(tibble)
library(ggplot2)
library(choroplethr)

# data frame must contain "region" and "value" columns



```

```{r}
df_fruits <- df %>%
  filter(Question == "Percent of adults who report consuming fruit less than one time daily") %>%
  filter(Category == "Total") %>%
  filter(YearStart == '2021')

# Create a new data frame with two columns
df_fruits <- data.frame(region = df_fruits$Location, value = df_fruits$Value)

# Print the structure of the new data frame
str(df_fruits)
```


```{r}
state_choropleth(df_fruits,
                 title = "Percent of adults who report consuming fruit less than one time daily",
                 legend = "Percentage")
```
```{r}
df_vegetables <- df %>%
  filter(Question == "Percent of adults who report consuming vegetables less than one time daily") %>%
  filter(Category == "Total") %>%
  filter(YearStart == '2021')

# Create a new data frame with two columns
df_vegetables <- data.frame(region = df_vegetables$Location, value = df_vegetables$Value)

# Print the structure of the new data frame
str(df_vegetables)
```
```{r}
state_choropleth(df_vegetables,
                 title = "Percent of adults who report consuming vegetables less than one time daily",
                 legend = "Percentage")
```

```{r}
df_obesity <- df %>%
  filter(Question == "Percent of adults aged 18 years and older who have obesity") %>%
  filter(Category == "Total") %>%
  filter(YearStart == '2021')


obesity_df <- data.frame(region = df_obesity$Location, value = df_obesity$Value)

df_merged <- merge(obesity_df, df_fruits, by = "region", all = TRUE)

df_merged <- merge(df_merged, df_vegetables, by = "region", all = TRUE)


colnames(df_merged)[2] <-  "Obesity"
colnames(df_merged)[3] <-  "Fruits"
colnames(df_merged)[4] <-  "Vegetables"

```

```{r}
library(plotly)

plot_ly(df_merged, x = ~Obesity, y = ~Fruits, text= ~region,
        hoverinfo = 'text') 
```

```{r}
plot_ly(df_merged, x = ~Obesity, y = ~Vegetables, text= ~region,
        hoverinfo = 'text') 
```


```{r}
library(parcoords)

parcoords(df_merged,rownames = FALSE,
            brushMode = "1D-axes",
            color = list(colorBy = "region",
                         colorScale = "scaleOrdinal",
                         colorScheme = "schemeCategory10"),
            alpha = 0.5,
            withD3 = TRUE,
            width = 770,
            height = 600)
```


```{r}
df %>%
  filter(Question == "Percent of adults who report consuming fruit less than one time daily") %>%
  filter(Category == "Total") %>%
  filter(YearStart == '2021')

df %>%
    filter(Question == "Percent of adults who report consuming fruit less than one time daily") %>%   filter(Category == 'Race/Ethnicity') %>% filter (YearStart == "2021")

```

```{r}
df_fruit_race <- df %>%
        filter(Question == "Percent of adults who report consuming fruit less than one time daily") %>%   filter(Category == 'Race/Ethnicity') %>% filter (YearStart == "2021") %>%
    pivot_wider(id_cols = Location, names_from = CategoryVal, values_from = Value)
```

```{r}
df_fruit_race <- df_fruit_race %>% select(where(~ sum(is.na(.)) <= 20))
```


```{r}
df_melted <- tidyr::pivot_longer(df_fruit_race, cols = -Location, names_to = "Category", values_to = "Value")

# Create the box plot
ggplot(df_melted, aes(x = Location, y = Value, color = Category)) +
  geom_point() +
  labs(x = "Location", y = "Value", title = "Cleveland Dot Plot") +
  theme_minimal() +
  coord_flip()
```
```{r}
parcoords(df_fruit_race,rownames = FALSE,
            brushMode = "1D-axes",
            color = list(colorBy = "Location",
                         colorScale = "scaleOrdinal",
                         colorScheme = "schemeCategory10"),
            alpha = 0.5,
            withD3 = TRUE,
            width = 770,
            height = 600)
```

```{r}
mean(df_fruit_race$Hispanic,na.rm = TRUE)

mean(df_fruit_race$`Non-Hispanic White`,na.rm = TRUE)

mean(df_fruit_race$Asian,na.rm = TRUE)

mean(df_fruit_race$`Non-Hispanic Black`,na.rm = TRUE)

mean(df_fruit_race$`2 or more races`,na.rm = TRUE)

```

```{r}
df_obesity_race <- df %>%
        filter(Question == "Percent of adults aged 18 years and older who have obesity") %>%filter(Category == 'Race/Ethnicity') %>% filter (YearStart == "2021") %>%
    pivot_wider(id_cols = Location, names_from = CategoryVal, values_from = Value)
```

```{r}
mean(df_obesity_race$Hispanic,na.rm = TRUE)

mean(df_obesity_race$`Non-Hispanic White`,na.rm = TRUE)

mean(df_obesity_race$Asian,na.rm = TRUE)

mean(df_obesity_race$`Non-Hispanic Black`,na.rm = TRUE)

mean(df_obesity_race$`2 or more races`,na.rm = TRUE)

```
```{r}
df$Sample <- df$Value  * df$SampleSize / 100

df_fruit1 <- df %>%
    filter(Question == "Percent of adults who report consuming fruit less than one time daily") %>% filter(Category == 'Race/Ethnicity') %>% filter (YearStart == "2021") %>% group_by(CategoryVal) %>%
    summarize(Sum_Column1 = sum(Sample,na.rm = TRUE), Sum_Column2 = sum(SampleSize,na.rm = TRUE))

df_fruit1$Value <- df_fruit1$Sum_Column1 / df_fruit1$Sum_Column2


ggplot(df_fruit1, aes(x = reorder(CategoryVal, Value), y = Value)) +
  geom_bar(stat = "identity", fill = "steelblue") +
  labs(x = "Category", y = "Value") +
  ggtitle("Bar Chart") + 
  coord_flip()
```
```{r}
df_fruit1 <- df %>%
    filter(Question == "Percent of adults who report consuming fruit less than one time daily") %>% filter(Category == 'Race/Ethnicity') %>% filter (YearStart == "2021") %>% group_by(CategoryVal) %>%
    summarize(Sum_Column1 = sum(Sample,na.rm = TRUE), Sum_Column2 = sum(SampleSize,na.rm = TRUE))

df_fruit1$Value <- df_fruit1$Sum_Column1 / df_fruit1$Sum_Column2


ggplot(df_fruit1, aes(x = reorder(CategoryVal, Value), y = Value)) +
  geom_bar(stat = "identity", fill = "steelblue") +
  labs(x = "Category", y = "Value") +
  ggtitle("Bar Chart") + 
  coord_flip()
```

```{r}
myFunction <- function(df, Question1, Category1) {
  # Function body
  df_fruit1 <- df %>%
    filter(Question == Question1) %>% filter(Category == Category1) %>% filter (YearStart == "2021") %>% group_by(CategoryVal) %>%
    summarize(Sum_Column1 = sum(Sample,na.rm = TRUE), Sum_Column2 = sum(SampleSize,na.rm = TRUE))

df_fruit1$Value <- df_fruit1$Sum_Column1 / df_fruit1$Sum_Column2


plot <- ggplot(df_fruit1, aes(x = reorder(CategoryVal, Value), y = Value)) +
  geom_bar(stat = "identity", fill = "steelblue") +
  labs(x = "Category", y = "Value") +
  ggtitle("Bar Chart") + 
  coord_flip()
  return(plot)
}

```

```{r}
plot1 <- myFunction(df,"Percent of adults who report consuming fruit less than one time daily",'Income')

plot2 <- myFunction(df,"Percent of adults who report consuming fruit less than one time daily",'Education')

plot3 <- myFunction(df,"Percent of adults who report consuming fruit less than one time daily",'Age (years)')

plot4 <- myFunction(df,"Percent of adults who report consuming fruit less than one time daily",'Race/Ethnicity')

grid.arrange(plot1, plot2, plot3,plot4, nrow = 2)

```
```{r}
library(gridExtra)
```
```{r}

## Income

#'Percent of adults who report consuming fruit less than one time daily'

IncomeQuestion <- function(df, Question1) {

df_fruit1 <- df %>%
    filter(Question == Question1) %>% filter(Category == 'Income') %>% filter (YearStart == "2021") %>% group_by(CategoryVal) %>%
    summarize(Sum_Column1 = sum(Sample,na.rm = TRUE), Sum_Column2 = sum(SampleSize,na.rm = TRUE))

df_fruit1$Value <- df_fruit1$Sum_Column1 / df_fruit1$Sum_Column2

df_fruit1 <- df_fruit1 %>% filter(CategoryVal!='Data not reported')

level_order <- c(
  "Less than $15,000",
  "$15,000 - $24,999",
  "$25,000 - $34,999",
  "$35,000 - $49,999",
  "$50,000 - $74,999",
  "$75,000 or greater"
)

# Factor the CategoryVal column
df_fruit1$CategoryVal <- factor(df_fruit1$CategoryVal, levels = level_order)


color_palette <- c(
  "#FF0000", "#FF2020", "#FF4D4D", "#FF7B7B", "#FFA8A8", "#FFD6D6"
)

plot1 <- ggplot(df_fruit1, aes(x = CategoryVal, y = Value, fill = CategoryVal)) +
  geom_bar(stat = "identity") +
  labs(x = "Income", y = "Percentage",fill = "Income Category") +
  scale_fill_manual(values = color_palette) +
  ggtitle(paste(Question1,"by Income")) + 
  theme(plot.title = element_text(size = 10)) +
  coord_flip()
return(plot1)
}

IncomeQuestion(df,'Percent of adults who report consuming fruit less than one time daily')

```


```{r}

## Education

EducationQuestion <- function(df, Question1) {

df_fruit1 <- df %>%
    filter(Question == Question1) %>% filter(Category == 'Education') %>% filter (YearStart == "2021") %>% group_by(CategoryVal) %>%
    summarize(Sum_Column1 = sum(Sample,na.rm = TRUE), Sum_Column2 = sum(SampleSize,na.rm = TRUE))

df_fruit1$Value <- df_fruit1$Sum_Column1 / df_fruit1$Sum_Column2

level_order <- c(
  "Less than high school",
  "High school graduate",
  "Some college or technical school",
  "College graduate"
)

# Factor the CategoryVal column
df_fruit1$CategoryVal <- factor(df_fruit1$CategoryVal, levels = level_order)


color_palette <- c(
  "#FF0000", "#FF4D4D", "#FF7B7B", "#FFD6D6"
)

plot1 <- ggplot(df_fruit1, aes(x = CategoryVal, y = Value, fill = CategoryVal)) +
  geom_bar(stat = "identity") +
  labs(x = "Education", y = "Percentage",fill="Education Category") +
  scale_fill_manual(values = color_palette) +
  ggtitle(paste(Question1,"by Education")) + 
  theme(plot.title = element_text(size = 8)) +
  coord_flip()

return(plot1)
}

EducationQuestion(df,'Percent of adults who report consuming fruit less than one time daily')

```
```{r}
## Age

AgeQuestion <- function(df, Question1) {

df_fruit1 <- df %>%
    filter(Question == Question1) %>% filter(Category == 'Age (years)') %>% filter (YearStart == "2021") %>% group_by(CategoryVal) %>%
    summarize(Sum_Column1 = sum(Sample,na.rm = TRUE), Sum_Column2 = sum(SampleSize,na.rm = TRUE))

df_fruit1$Value <- df_fruit1$Sum_Column1 / df_fruit1$Sum_Column2

level_order <- c(
  "18 - 24",
  "25 - 34",
  "35 - 44",
  "45 - 54",
  "55 - 64",
  "65 or older"
)

# Factor the CategoryVal column
df_fruit1$CategoryVal <- factor(df_fruit1$CategoryVal, levels = level_order)


color_palette <- c(
  "#FF0000", "#FF2020", "#FF4D4D", "#FF7B7B", "#FFA8A8", "#FFD6D6"
)

plot1 <- ggplot(df_fruit1, aes(x = CategoryVal, y = Value, fill = CategoryVal)) +
  geom_bar(stat = "identity") +
  labs(x = "Age", y = "Percentage", fill="Age Category") +
  scale_fill_manual(values = color_palette) +
  ggtitle(paste(Question1,"by Age")) + 
  theme(plot.title = element_text(size = 10)) +
  coord_flip()
return(plot1)
}

AgeQuestion(df,'Percent of adults who report consuming fruit less than one time daily')

```
```{r}

#Race

RaceQuestion <- function(df, Question1) {

df_fruit1 <- df %>%
    filter(Question == Question1) %>% filter(Category == 'Race/Ethnicity') %>% filter (YearStart == "2021") %>% group_by(CategoryVal) %>%
    summarize(Sum_Column1 = sum(Sample,na.rm = TRUE), Sum_Column2 = sum(SampleSize,na.rm = TRUE))

df_fruit1$Value <- df_fruit1$Sum_Column1 / df_fruit1$Sum_Column2

df_fruit1 <- df_fruit1 %>% filter(CategoryVal!='Hawaiian/Pacific Islander') %>% filter(CategoryVal!='Other') %>% filter(CategoryVal!='American Indian/Alaska Native')

plot1 <- ggplot(df_fruit1, aes(x = reorder(CategoryVal, Value), y = Value, fill = CategoryVal)) +
  geom_bar(stat = "identity") +
  labs(x = "Race", y = "Percentage",fill = "Race") +
  ggtitle(paste(Question1,"by Race")) + 
  theme(plot.title = element_text(size = 10)) +
  coord_flip()

return(plot1)
}

RaceQuestion(df, 'Percent of adults who report consuming fruit less than one time daily')
```
```{r}
QuestionCategory <- function(df,Question1,Category1) {
  if (Category1 == "Income") {
    # Function for case 1
    IncomeQuestion(df,Question1)
  } else if (Category1 == "Education") {
    # Function for case 2
    EducationQuestion(df,Question1)
  } else if (Category1 == "Age") {
    # Function for case 3
    AgeQuestion(df,Question1)
  } else if (Category1 == "Race") {
    # Function for case 4
    RaceQuestion(df,Question1)
  } else {
    # Default action if case is not recognized
    print("Invalid case")
  }
}

QuestionCategory(df,'Percent of adults who report consuming vegetables less than one time daily','Race')

```
```{r}
library(plotly)

Question1 = 'Percent of adults who report consuming fruit less than one time daily'

Question2 = 'Percent of adults aged 18 years and older who have obesity'

ScatterplotQIncome <- function(df,Question1,Question2) {

df_Question1 <- df %>%
    filter(Question == Question1) %>% filter(Category == 'Income') %>% filter (YearStart == "2021") %>% group_by(CategoryVal) %>%
    summarize(Sum_Column1 = sum(Sample,na.rm = TRUE), Sum_Column2 = sum(SampleSize,na.rm = TRUE))

df_Question1$Value <- df_Question1$Sum_Column1 / df_Question1$Sum_Column2


df_Question2 <- df %>%
    filter(Question == Question2) %>% filter(Category == 'Income') %>% filter (YearStart == "2021") %>% group_by(CategoryVal) %>%
    summarize(Sum_Column1 = sum(Sample,na.rm = TRUE), Sum_Column2 = sum(SampleSize,na.rm = TRUE))

df_Question2$Value <- df_Question2$Sum_Column1 / df_Question2$Sum_Column2

df_Question1 <- df_Question1 %>% filter(CategoryVal!='Data not reported')
df_Question2 <- df_Question2 %>% filter(CategoryVal!='Data not reported')

df_merged <- merge(df_Question1, df_Question2, by = "CategoryVal", all = TRUE)

colnames(df_merged)[4] <-  "Question1"
colnames(df_merged)[7] <-  "Question2"

scatter_plot <- plot_ly(df_merged, x = ~Question1, y = ~Question2, text= ~CategoryVal,
        hoverinfo = 'text') 

# Customize the layout
scatter_plot <- scatter_plot %>% 
  layout(
    xaxis = list(
      title = paste(Question1,'by Income'),
      titlefont = list(
        size = 10  # Change the size of the x-axis label
      )
    ),
    yaxis = list(
      title = paste(Question2,'by Income'),
      titlefont = list(
        size = 10  # Change the size of the x-axis label
      )
    ),
    title = "Scatterplot of the comparison of two questions by Income"
  )

return(scatter_plot)
}

ScatterplotQIncome(df,Question1,Question2)

```

```{r}
Question1 = 'Percent of adults who report consuming fruit less than one time daily'

Question2 = 'Percent of adults aged 18 years and older who have obesity'

ScatterplotQEducation <- function(df,Question1,Question2) {

df_Question1 <- df %>%
    filter(Question == Question1) %>% filter(Category == 'Education') %>% filter (YearStart == "2021") %>% group_by(CategoryVal) %>%
    summarize(Sum_Column1 = sum(Sample,na.rm = TRUE), Sum_Column2 = sum(SampleSize,na.rm = TRUE))

df_Question1 <- df_Question1 %>% filter(CategoryVal!='Data not reported')

df_Question1$Value <- df_Question1$Sum_Column1 / df_Question1$Sum_Column2


df_Question2 <- df %>%
    filter(Question == Question2) %>% filter(Category == 'Education') %>% filter (YearStart == "2021") %>% group_by(CategoryVal) %>%
    summarize(Sum_Column1 = sum(Sample,na.rm = TRUE), Sum_Column2 = sum(SampleSize,na.rm = TRUE))

df_Question2$Value <- df_Question2$Sum_Column1 / df_Question2$Sum_Column2

df_merged <- merge(df_Question1, df_Question2, by = "CategoryVal", all = TRUE)

colnames(df_merged)[4] <-  "Question1"
colnames(df_merged)[7] <-  "Question2"

scatter_plot <- plot_ly(df_merged, x = ~Question1, y = ~Question2, text= ~CategoryVal,
        hoverinfo = 'text') 

# Customize the layout
scatter_plot <- scatter_plot %>% 
  layout(
    xaxis = list(
      title = paste(Question1,'by Income'),
      titlefont = list(
        size = 10  # Change the size of the x-axis label
      )
    ),
    yaxis = list(
      title = paste(Question2,'by Income'),
      titlefont = list(
        size = 10  # Change the size of the x-axis label
      )
    ),
    title = "Scatterplot of the comparison of two questions by Education"
  )

return(scatter_plot)
}

ScatterplotQEducation(df,Question1,Question2)
```

```{r}
Question1 = 'Percent of adults who report consuming fruit less than one time daily'

Question2 = 'Percent of adults aged 18 years and older who have obesity'

ScatterplotQAge <- function(df,Question1,Question2) {

df_Question1 <- df %>%
    filter(Question == Question1) %>% filter(Category == 'Age (years)') %>% filter (YearStart == "2021") %>% group_by(CategoryVal) %>%
    summarize(Sum_Column1 = sum(Sample,na.rm = TRUE), Sum_Column2 = sum(SampleSize,na.rm = TRUE))

df_Question1$Value <- df_Question1$Sum_Column1 / df_Question1$Sum_Column2


df_Question2 <- df %>%
    filter(Question == Question2) %>% filter(Category == 'Age (years)') %>% filter (YearStart == "2021") %>% group_by(CategoryVal) %>%
    summarize(Sum_Column1 = sum(Sample,na.rm = TRUE), Sum_Column2 = sum(SampleSize,na.rm = TRUE))

df_Question2$Value <- df_Question2$Sum_Column1 / df_Question2$Sum_Column2

df_merged <- merge(df_Question1, df_Question2, by = "CategoryVal", all = TRUE)

colnames(df_merged)[4] <-  "Question1"
colnames(df_merged)[7] <-  "Question2"

scatter_plot <- plot_ly(df_merged, x = ~Question1, y = ~Question2, text= ~CategoryVal,
        hoverinfo = 'text') 

# Customize the layout
scatter_plot <- scatter_plot %>% 
  layout(
    xaxis = list(
      title = paste(Question1,'by Age'),
      titlefont = list(
        size = 10  # Change the size of the x-axis label
      )
    ),
    yaxis = list(
      title = paste(Question2,'by Age'),
      titlefont = list(
        size = 10  # Change the size of the x-axis label
      )
    ),
    title = "Scatterplot of the comparison of two questions by Age"
  )

return(scatter_plot)
}

ScatterplotQAge(df,Question1,Question2)
```

```{r}
Question1 = 'Percent of adults who report consuming vegetables less than one time daily'

Question2 = 'Percent of adults aged 18 years and older who have obesity'

ScatterplotQRace <- function(df,Question1,Question2) {

df_Question1 <- df %>%
    filter(Question == Question1) %>% filter(Category == 'Race/Ethnicity') %>% filter (YearStart == "2021") %>% group_by(CategoryVal) %>%
    summarize(Sum_Column1 = sum(Sample,na.rm = TRUE), Sum_Column2 = sum(SampleSize,na.rm = TRUE))

df_Question1 <- df_Question1 %>% filter(CategoryVal!='Hawaiian/Pacific Islander') %>% filter(CategoryVal!='Other') %>% filter(CategoryVal!='American Indian/Alaska Native')

df_Question1$Value <- df_Question1$Sum_Column1 / df_Question1$Sum_Column2


df_Question2 <- df %>%
    filter(Question == Question2) %>% filter(Category == 'Race/Ethnicity') %>% filter (YearStart == "2021") %>% group_by(CategoryVal) %>%
    summarize(Sum_Column1 = sum(Sample,na.rm = TRUE), Sum_Column2 = sum(SampleSize,na.rm = TRUE))

df_Question2 <- df_Question2 %>% filter(CategoryVal!='Hawaiian/Pacific Islander') %>% filter(CategoryVal!='Other') %>% filter(CategoryVal!='American Indian/Alaska Native')

df_Question2$Value <- df_Question2$Sum_Column1 / df_Question2$Sum_Column2

df_merged <- merge(df_Question1, df_Question2, by = "CategoryVal", all = TRUE)

colnames(df_merged)[4] <-  "Question1"
colnames(df_merged)[7] <-  "Question2"

scatter_plot <- plot_ly(df_merged, x = ~Question1, y = ~Question2, text= ~CategoryVal,
        hoverinfo = 'text') 

# Customize the layout
scatter_plot <- scatter_plot %>% 
  layout(
    xaxis = list(
      title = paste(Question1,'by Race'),
      titlefont = list(
        size = 10  # Change the size of the x-axis label
      )
    ),
    yaxis = list(
      title = paste(Question2,'by Race'),
      titlefont = list(
        size = 10  # Change the size of the x-axis label
      )
    ),
    title = "Scatterplot of the comparison of two questions by Race"
  )

return(scatter_plot)
}

ScatterplotQRace(df,Question1,Question2)
```

```{r}
QuestionCategoryScatterplot <- function(df,Question1,Question2,Category1) {
  if (Category1 == "Income") {
    # Function for case 1
    ScatterplotQIncome(df,Question1,Question2)
  } else if (Category1 == "Education") {
    # Function for case 2
    ScatterplotQEducation(df,Question1,Question2)
  } else if (Category1 == "Age") {
    # Function for case 3
    ScatterplotQAge(df,Question1,Question2)
  } else if (Category1 == "Race") {
    # Function for case 4
    ScatterplotQRace(df,Question1,Question2)
  } else {
    # Default action if case is not recognized
    print("Invalid case")
  }
}

Question1 = 'Percent of adults who report consuming vegetables less than one time daily'

Question2 = 'Percent of adults aged 18 years and older who have obesity'

QuestionCategoryScatterplot(df,Question1,Question2,'Race')
```


```{r}

QuestionCategoryTimeSeries <- function(df,Question1,Category1) {

df_Question1 <- df %>%
    filter(Question == Question1) %>% filter(Category == Category1) %>% group_by(YearStart,CategoryVal) %>%
    summarize(Sum_Column1 = sum(Sample,na.rm = TRUE), Sum_Column2 = sum(SampleSize,na.rm = TRUE))

df_Question1 <- df_Question1 %>% filter(CategoryVal!='Hawaiian/Pacific Islander') %>% filter(CategoryVal!='Other') %>% filter(CategoryVal!='American Indian/Alaska Native')

df_Question1 <- df_Question1 %>% filter(CategoryVal!='Data not reported')

df_Question1$Value <- df_Question1$Sum_Column1 / df_Question1$Sum_Column2

# Create the initial plot
plot <- plot_ly()

# Iterate over each category
categories <- unique(df_Question1$CategoryVal)
for (category in categories) {
  # Subset the data for the current category
  subset_df <- df_Question1[df_Question1$CategoryVal == category, ]
  
  # Add a trace for the current category
  plot <- plot %>% 
    add_trace(
      x = subset_df$YearStart,
      y = subset_df$Value,
      type = "scatter",
      mode = "lines+markers",
      name = category
    )
}

# Customize the layout
plot <- plot %>% 
  layout(
    xaxis = list(title = "Year"),
    yaxis = list(title = "Percentages"),
    title = paste(Question1,'across Years for',Category1)
  )

# Display the plot
return(plot)

}

QuestionCategoryTimeSeries(df,'Percent of adults aged 18 years and older who have obesity','Income')

```
`

